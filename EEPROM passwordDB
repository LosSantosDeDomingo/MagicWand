// Author: ChatGPT Generated Example Code
// Date: 10|18|2024
// Purpose:
/*
    The purpose of this code was to learn how to save password
    information on to the ESP32 through the use of EEPROM. The
    EEPROM library allows for the permanent read/write of data
    on to the microcontroller.
*/

#include <EEPROM.h>

#define EEPROM_SIZE 64 // 64 bytes. Matches with the Bytes need for Serial.available()
#define PASSWORD1_ADDR 0 // Address location of Password 1
#define PASSWORD2_ADDR 32 // Address location of Password 2

// Hard-coded passwords strings
String storedPassword1 = "password123";
String storedPassword2 = "admin9876";

void setup() {
  Serial.begin(115200);
  // Needed for ESP devices to declare the number of bytes we want to use must be between 4 - 4096 bytes
  if (!EEPROM.begin(EEPROM_SIZE)) { //Creates and checks if EEPROM.begin() was successfully run
    Serial.println("Failed to initialize EEPROM");
    while (1);
  }

  // Set password
  writePassword(PASSWORD1_ADDR, storedPassword1);
  writePassword(PASSWORD2_ADDR, storedPassword2);

  // Debug: Check if passwords were written correctly
  Serial.print("Stored Password 1: ");
  Serial.println(readPassword(PASSWORD1_ADDR));
  Serial.print("Stored Password 2: ");
  Serial.println(readPassword(PASSWORD2_ADDR));

  Serial.println("Enter Password:");
}

void loop() {
  if (Serial.available()) { //Needed for password storing
    /*
      Get the number of bytes (characters) available for reading from the serial port. 
      This is data thatâ€™s already arrived and stored in the serial receive buffer (which holds 64 bytes).
    */
    String userInput = Serial.readStringUntil('\n'); // reads characters from the serial buffer into a String.
    userInput.trim();  // Remove extra spaces/newlines

    Serial.print("User Input: ");
    Serial.println(userInput);  // Debugging print

    if (verifyPassword(userInput)) {
      Serial.println("Access Granted!");
    } else {
      Serial.println("Access Denied.");
    }

    Serial.println("Enter Password:");
  }
}

void writePassword(int address, const String &password) {
  for (int i = 0; i < password.length(); i++) {
    EEPROM.write(address + i, password[i]); // Write a byte to the EEPROM.
  }
  EEPROM.write(address + password.length(), '\0'); // Null-terminate
  // Must finish every write() with a commit() function
  EEPROM.commit(); // Needed for the ESP devices to write data to EEPROM (or flash memory)
  Serial.println("Password saved!");
}

String readPassword(int address) {
  String password = "";
  char c;
  for (int i = 0; i < 32; i++) {
    c = EEPROM.read(address + i); // Reads a byte from the EEPROM. Locations that have never been written to have the value of 255.
    if (c == '\0') break;
    password += c;
  }
  return password;
}

bool verifyPassword(const String &input) {
  String pass1 = readPassword(PASSWORD1_ADDR);
  String pass2 = readPassword(PASSWORD2_ADDR);

  // Debugging prints for passwords
  Serial.print("Comparing with Password 1: ");
  Serial.println(pass1);
  Serial.print("Comparing with Password 2: ");
  Serial.println(pass2);

  return (input == pass1 || input == pass2);
}
